from unittest import result
from langchain_core.tools import tool
from src.utils.helper import convert_list_context_source_to_str
from src.utils.logger import logger
from langchain_core.runnables import RunnableConfig
from langchain_experimental.utilities import PythonREPL
from langchain_community.tools import DuckDuckGoSearchRun
from src.utils.rcmsizetool import predict_size
import psycopg2
import re
from dotenv import load_dotenv
import os

duckduckgo_search = DuckDuckGoSearchRun()
python_exec = PythonREPL()
load_dotenv() 
conn_str = os.getenv("SUPABASE_DB_URL")
conn = psycopg2.connect(conn_str)
cursor = conn.cursor()

# H√†m d·ª± ƒëo√°n size qu·∫ßn √°o
def predict_size_model(message: str) -> str:
    """
    G·ª£i √Ω size d·ª±a tr√™n c√°c y·∫øu t·ªë nh∆∞ chi·ªÅu cao, c√¢n n·∫∑ng, gi·ªõi t√≠nh, tu·ªïi, chi·ªÅu d√†i l∆∞ng, v√≤ng ng·ª±c.
    """
    try:
        height_match = re.search(r"cao\s*(\d+)", message)
        weight_match = re.search(r"n·∫∑ng\s*(\d+)", message)
        gender_match = re.search(r"(nam|n·ªØ|male|female)", message.lower())
        if not (height_match and weight_match and gender_match):
            return "Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß chi·ªÅu cao, c√¢n n·∫∑ng v√† gi·ªõi t√≠nh ƒë·ªÉ t√¥i g·ª£i √Ω size nh√©, n·∫øu c√≥ th√™m chi·ªÅu d√†i l∆∞ng v√† v√≤ng ng·ª±c s·∫Ω t·ªët h∆°n."
        height = float(height_match.group(1))
        weight = float(weight_match.group(1))
        gender = gender_match.group(1)
        # Th√¥ng tin t√πy ch·ªçn
        length_back_match = re.search(r"(l∆∞ng|chi·ªÅu d√†i l∆∞ng)\s*(\d+)", message)
        chest_match = re.search(r"(ng·ª±c|v√≤ng ng·ª±c|ngang ng·ª±c)\s*(\d+)", message)
        length_back = float(length_back_match.group(2)) if length_back_match else None
        chest = float(chest_match.group(2)) if chest_match else None
        # G·ªçi model d·ª± ƒëo√°n
        result = predict_size(height, weight, gender, length_back, chest)
        response = (
                    f"üìè **K·∫øt qu·∫£ g·ª£i √Ω size:**\n"
                    f"- Chi·ªÅu cao: **{height}cm**\n"
                    f"- C√¢n n·∫∑ng: **{weight}kg**\n"
                    f"- Gi·ªõi t√≠nh: **{gender.capitalize()}**\n"
        )
        if length_back:
            response += f"- Chi·ªÅu d√†i l∆∞ng: **{length_back}cm**\n"
        if chest:
            response += f"- ƒê·ªô r·ªông ng·ª±c: **{chest}cm**\n"

        response += f"üéØ **Size ph√π h·ª£p:** {result['recommended_size']}"
        return response

    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω: {e}"

# T√¨m ki·∫øm s·∫£n ph·∫©m
def extract_query_product(
    size: str = "",
    color: str = "",
    price_range: str = "",
    in_stock: bool = True,
    limit: int = 5,
    country_code: str = "VN" 
) -> list:
    """
    Truy v·∫•n s·∫£n ph·∫©m theo k√≠ch c·ª°, m√†u s·∫Øc, kho·∫£ng gi√°, c√≤n h√†ng v√† gi√° theo qu·ªëc gia.
    """
    sql = """
    SELECT 
        p.id,
        p.name AS product_name,
        pp.price,
        v.size,
        v.color,
        v.sku,
        v.stock
    FROM "Product" p
    LEFT JOIN "ProductVariant" v ON v."productId" = p.id
    LEFT JOIN "ProductPrice" pp ON pp."productId" = p.id
    LEFT JOIN "Country" c ON c.id = pp."countryId"
    WHERE 1=1
    """
    params = []
    # ‚úÖ L·ªçc qu·ªëc gia 
    sql += " AND c.code = %s"
    params.append(country_code)
    # L·ªçc theo size
    if size:
        sql += " AND v.size ILIKE %s"
        params.append(f"%{size.strip()}%")
    # L·ªçc theo m√†u s·∫Øc
    if color:
        sql += " AND v.color ILIKE %s"
        params.append(f"%{color.strip()}%")
    # L·ªçc theo c√≤n h√†ng
    if in_stock:
        sql += " AND v.stock > 0"
    # L·ªçc theo kho·∫£ng gi√°
    price_min = 0
    price_max = 1e9
    if price_range:
        t = price_range.lower().replace(".", "").replace(",", "")
        digits = [int(s) for s in t.split() if s.isdigit()]
        if "d∆∞·ªõi" in t and digits:
            price_max = digits[0]
        elif "tr√™n" in t and digits:
            price_min = digits[0]
        elif "-" in t:
            try:
                parts = t.split("-")
                price_min = int("".join(filter(str.isdigit, parts[0])))
                price_max = int("".join(filter(str.isdigit, parts[1])))
            except:
                pass
    sql += " AND pp.price BETWEEN %s AND %s"
    params.extend([price_min, price_max])
    sql += " ORDER BY pp.price ASC LIMIT %s"
    params.append(limit)
    cursor.execute(sql, params)
    products = cursor.fetchall()

    if not products:
        return "üòî Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."

    response = "üîé **K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m:**\n"
    for p in products:
        pid, name, price, size, color, sku, stock = p
        response += (
            f"\nüß• **{name}**\n"
            f"- üí∞ Gi√°: {price:,.0f} VND\n"
            f"- üé® M√†u: {color} | üìè Size: {size}\n"
            f"- üî¢ SKU: {sku} | üì¶ T·ªìn kho: {stock}\n"
        )
    response += "\nüëâ B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?"
    return response

# Tr√≠ch xu·∫•t ki·ªÉm tra ƒë∆°n h√†ng
def check_order_status(order_id: str = "", phone: str = "") -> str:
    """
    Ki·ªÉm tra t√¨nh tr·∫°ng ƒë∆°n h√†ng v√† hi·ªÉn th·ªã chi ti·∫øt t·ª´ng ƒë∆°n h√†ng k√®m th√¥ng tin kh√°ch h√†ng v√† s·∫£n ph·∫©m.
    """
    sql = """
        SELECT 
            o.id,
            o."orderCode",
            o.status,
            o."createdAt",
            o.total,
            o."shippingFullName",
            a."firstName",
            a."lastName",
            o."shippingEmail",
            a.phone,
            o."customerNote",
            a.street,
            a.ward,
            a.district,
            a.province,
            a."countryId"
        FROM "Order" o
        LEFT JOIN "Address" a ON a.id = o."addressId"
        WHERE 1=1
    """
    params = []
    if order_id:
        sql += " AND o.\"orderCode\" ILIKE %s"
        params.append(f"%{order_id}%")
    if phone:
        sql += " AND a.phone ILIKE %s"
        params.append(f"%{phone}%")
    sql += " ORDER BY o.\"createdAt\" DESC LIMIT 3"
    try:
        logger.info(f"Checking order status with params: {params}")
        cursor.execute(sql, params)
        orders = cursor.fetchall()
        if not orders:
            return "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o kh·ªõp v·ªõi th√¥ng tin b·∫°n cung c·∫•p."
        response = "T√¥i ƒë√£ t√¨m th·∫•y c√°c ƒë∆°n h√†ng c·ªßa b·∫°n v·ªõi th√¥ng tin ƒë√£ cung c·∫•p:\n"
        
        for order in orders:
            (
                order_id,
                order_code,
                status,
                created_at,
                total,
                shipping_full_name,
                first_name,
                last_name,
                email,
                phone,
                note,
                street,
                ward,
                district,
                province,
                country_id
            ) = order
            # X·ª≠ l√Ω t√™n ng∆∞·ªùi nh·∫≠n
            if shipping_full_name:
                full_name = shipping_full_name.strip()
            else:
                full_name = f"{first_name or ''} {last_name or ''}".strip()
            created_at_fmt = created_at.strftime("%d/%m/%Y %H:%M")
            total_fmt = f"{total:,.0f} VND"
            note = note if note else "(kh√¥ng c√≥ ghi ch√∫)"
            address_parts = [street, ward, district, province]
            shipping_address = ', '.join([p for p in address_parts if p])
            response += (
                f"\n**ƒê∆°n h√†ng {order_code}:**\n"
                f"* **Tr·∫°ng th√°i:** {status}\n"
                f"* **Ng√†y ƒë·∫∑t:** {created_at_fmt}\n"
                f"* **T·ªïng ti·ªÅn:** {total_fmt}\n"
                f"* **T√™n ng∆∞·ªùi ƒë·∫∑t:** {full_name}\n"
                f"* **S·ªë ƒëi·ªán tho·∫°i:** {phone}\n"
                f"* **Email:** {email or '(kh√¥ng c√≥ email)'}\n"
                f"* **ƒê·ªãa ch·ªâ:** {shipping_address}\n"
                f"* **Ghi ch√∫:** {note}\n"
                f"* **S·∫£n ph·∫©m:**\n"
            )
            # Truy v·∫•n s·∫£n ph·∫©m c·ªßa ƒë∆°n h√†ng
            item_sql = """
                SELECT 
                    p.name,
                    v.size,
                    v.color,
                    i.quantity,
                    i.price
                FROM "OrderItem" i
                JOIN "Product" p ON p.id = i."productId"
                JOIN "ProductVariant" v ON v.id = i."productVariantId"
                WHERE i."orderId" = %s
            """
            cursor.execute(item_sql, (order_id,))
            items = cursor.fetchall()
            for item in items:
                name, size, color, quantity, price = item
                response += (
                    f"*   {name} (Size {size}, M√†u {color}) ‚Äì "
                    f"S·ªë l∆∞·ª£ng: {quantity} ‚Äì Gi√°: {price:,.0f} VND\n"
                )
        return response
    except Exception as e:
        logger.error(f"Error checking order: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau."

# L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m
def extract_information_product(product_keyword: str) -> str:
    """
    Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m bao g·ªìm c√°c bi·∫øn th·ªÉ: size, m√†u, SKU, t·ªìn kho, gi√°, kh·ªëi l∆∞·ª£ng.
    """
    sql = """
        SELECT 
        p.id,
        p.name,
        p.description,
        p.price AS default_price,
        p.stock,
        p.images,
        c.name AS category_name,
        v.id AS variant_id,
        v.color,
        v.size,
        v.stock AS variant_stock,
        v.sku,
        v.weight
    FROM "Product" p
    LEFT JOIN "Category" c ON c.id = p."categoryId"
    LEFT JOIN "ProductVariant" v ON v."productId" = p.id 
    WHERE LOWER(p.name) ILIKE %s
    ORDER BY v.size, v.color
    """
    try:
        cursor.execute(sql, (f"%{product_keyword.lower()}%",))
        rows = cursor.fetchall()

        if not rows:
            return f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o kh·ªõp v·ªõi t·ª´ kh√≥a: {product_keyword}"

        first_row = rows[0]
        product_name = first_row[1]
        description = first_row[2]
        default_price = first_row[3]
        total_stock = first_row[4]
        images = first_row[5]
        category_name = first_row[6]

        response = f"üõç **{product_name}**\n"
        response += f"- Danh m·ª•c: {category_name}\n"
        response += f"- Gi√° m·∫∑c ƒë·ªãnh: {default_price:,.0f} VND\n"
        response += f"- T·ªïng t·ªìn kho: {total_stock} s·∫£n ph·∫©m\n"
        response += f"- M√¥ t·∫£: {description}\n"
        if images:
            response += f"- H√¨nh ·∫£nh: {images[0]}\n"

        response += "\n**üîÑ Bi·∫øn th·ªÉ s·∫£n ph·∫©m:**\n"
        for row in rows:
            color = row[8]
            size = row[9]
            variant_stock = row[10]
            sku = row[11]
            weight = row[12]

            response += (
                f"* M√†u: {color} ‚Äì Size: {size} ‚Äì SKU: {sku} ‚Äì "
                f"T·ªìn kho: {variant_stock} ‚Äì N·∫∑ng: {weight}kg\n"
            )

        return response

    except Exception as e:
        logger.error(f"L·ªói khi truy v·∫•n chi ti·∫øt s·∫£n ph·∫©m: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi l·∫•y chi ti·∫øt s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i."


# L·∫•y th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán c√≥
def check_active_coupons() -> str:
    """
    Tr·∫£ v·ªÅ danh s√°ch c√°c m√£ gi·∫£m gi√° c√≤n hi·ªáu l·ª±c.
    """
    sql = """
        SELECT 
            code,
            type,
            "discountType",
            "discountValue",
            "maxDiscount",
            "minOrderValue",
            "startDate",
            "endDate"
        FROM "Coupon"
        WHERE "isActive" = TRUE
          AND NOW() BETWEEN "startDate" AND "endDate"
        ORDER BY "startDate" DESC
        LIMIT 10
    """
    try:
        cursor.execute(sql)
        coupons = cursor.fetchall()

        if not coupons:
            return "Hi·ªán t·∫°i kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o ƒëang ho·∫°t ƒë·ªông."

        response = "üéÅ **Danh s√°ch m√£ gi·∫£m gi√° hi·ªán c√≥:**\n"
        for c in coupons:
            (
                code,
                ctype,
                discount_type,
                discount_value,
                max_discount,
                min_order_value,
                start_date,
                end_date,
            ) = c

            # Hi·ªÉn th·ªã m·ª©c gi·∫£m
            if discount_type == "AMOUNT":
                discount_info = f"{discount_value:,.0f} VND"
            elif discount_type == "PERCENT":
                discount_info = f"{discount_value:.0f}%"
            else:
                discount_info = f"{discount_value}"

            max_discount_str = (
                f" ‚Äì Gi·∫£m t·ªëi ƒëa {max_discount:,.0f} VND" if max_discount else ""
            )
            min_order_str = (
                f" ‚Äì ƒê∆°n t·ªëi thi·ªÉu {min_order_value:,.0f} VND" if min_order_value else ""
            )

            response += (
                f"- M√£ **{code}**: Gi·∫£m {discount_info}{max_discount_str}{min_order_str}\n"
                f"  ‚è≥ Hi·ªáu l·ª±c: {start_date.strftime('%d/%m/%Y')} ‚Üí {end_date.strftime('%d/%m/%Y')}\n"
            )

        return response

    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y coupon: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra m√£ gi·∫£m gi√°. Vui l√≤ng th·ª≠ l·∫°i sau."
