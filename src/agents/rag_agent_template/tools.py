from pprint import pp
from unittest import result
from langchain_core.tools import tool
from src.utils.helper import convert_list_context_source_to_str
from src.utils.logger import logger
from langchain_core.runnables import RunnableConfig
from langchain_experimental.utilities import PythonREPL
from langchain_community.tools import DuckDuckGoSearchRun
from src.utils.rcmsizetool import predict_size_public
import psycopg2
import re
from dotenv import load_dotenv
import os
import json
from flask import request
from urllib.parse import quote
duckduckgo_search = DuckDuckGoSearchRun()
python_exec = PythonREPL()
load_dotenv()
conn_str = os.getenv("SUPABASE_DB_URL")
conn = psycopg2.connect(conn_str)
cursor = conn.cursor()

# H√†m g·ª£i √Ω size
def predict_size_model(user_height_text: str, user_weight_text: str,
                        user_gender_text: str, user_fit_text: str = "v·ª´a") -> str:
    """
    G·ª£i √Ω size d·ª±a v√†o chi·ªÅu cao, c√¢n n·∫∑ng, gi·ªõi t√≠nh, phong c√°ch m·∫∑c (√¥m, v·ª´a, r·ªông)
    Args:
        height : chi·ªÅu cao c·ªßa ng∆∞·ªùi d√πng
        weight: c√¢n n·∫∑ng c·ªßa ng∆∞·ªùi d√πng
        gender : gi·ªõi t√≠nh c·ªßa ng∆∞·ªùi d√πng
        fit : phong c√°ch nh∆∞ √¥m, v·ª´a, r·ªông
    """
    # Parse s·ªë ‚Äú165cm‚Äù, ‚Äú50kg‚Äù th√†nh float
    import re
    h_match = re.search(r"(\d+(?:\.\d+)?)\s*cm", user_height_text.lower())
    w_match = re.search(r"(\d+(?:\.\d+)?)\s*kg", user_weight_text.lower())
    if not h_match or not w_match:
        return "Vui l√≤ng cung c·∫•p chi·ªÅu cao (cm) v√† c√¢n n·∫∑ng (kg)."

    height = float(h_match.group(1))
    weight = float(w_match.group(1))

    base, final = predict_size_public(user_gender_text, height, weight, user_fit_text, True)
    return f"Size c∆° b·∫£n: {base}. Theo phong c√°ch '{user_fit_text}': {final}."


# T√¨m ki·∫øm s·∫£n ph·∫©m d·ª±a v√†o ti√™u ch√≠ gi√°, size, m√†u.
def extract_query_product(
    size: str = "",
    color: str = "",
    price_range: str = "",
    in_stock: bool = True,
    limit: int = 5,
    country_code: str = "",
    lang: str = "",
    category_name: str = "",
) -> list:
    """
    Truy v·∫•n s·∫£n ph·∫©m theo k√≠ch c·ª°, m√†u s·∫Øc, kho·∫£ng gi√°, c√≤n h√†ng v√† gi√° theo qu·ªëc gia, danh m·ª•c s·∫£n ph·∫©m l√† th·ªùi trang nam ho·∫∑c th·ªùi trang n·ªØ.
    Args:
        size (str): K√≠ch c·ª° s·∫£n ph·∫©m.
        color (str): M√†u s·∫Øc s·∫£n ph·∫©m.
        price_range (str): Kho·∫£ng gi√° s·∫£n ph·∫©m. N·∫øu l√† ti·∫øng vi·ªát (Vi·ªát Nam) th√¨ truy v·∫•n gi√° theo qu·ªëc gia Vi·ªát Nam, c√≤n ti·∫øng anh (M·ªπ) th√¨ truy v·∫•n gi√° theo qu·ªëc gia M·ªπ. V√≠ d·ª• n·∫øu l√† ti·∫øng vi·ªát th√¨ c√≥ th·ªÉ l√† " d∆∞·ªõi 500k", "tr√™n 500K", "kho·∫£ng 200k", "t·ª´ 200-500k", c√≤n n·∫øu ti·∫øng anh th√¨ c√≥ th·ªÉ l√† "under 50$", "over 500$", "about 200$", "from 200-500$".
        in_stock (bool): Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≤n h√†ng.
        limit (int): S·ªë l∆∞·ª£ng s·∫£n ph·∫©m tr·∫£ v·ªÅ.
        country_code (str): M√£ qu·ªëc gia ƒë·ªÉ l·∫•y gi√° theo qu·ªëc gia.
        lang (str): Ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi d√πng, ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch hi·ªÉn th·ªã k·∫øt qu·∫£.
        category_name (str): T√™n danh m·ª•c s·∫£n ph·∫©m ƒë·ªÉ l·ªçc k·∫øt qu·∫£. V√≠ d·ª•: th·ªùi trang nam, th·ªùi trang n·ªØ.
    Returns:
        list: Danh s√°ch s·∫£n ph·∫©m ph√π h·ª£p d∆∞·ªõi d·∫°ng markdown.
        C√≥ k√®m h√¨nh ·∫£nh s·∫£n ph·∫©m v√† link ƒë·∫øn trang chi ti·∫øt s·∫£n ph·∫©m.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
    sql = """
    SELECT 
        p.id,
        p.name AS product_name,
        pp.price,
        v.size,
        v.color,
        v.sku,
        v.stock,
        p.images[1] AS image_url
    FROM "Product" p
    LEFT JOIN "ProductVariant" v ON v."productId" = p.id
    LEFT JOIN "ProductPrice" pp ON pp."productId" = p.id
    LEFT JOIN "Country" c ON c.id = pp."countryId"
    LEFT JOIN "Category" cat ON cat.id = p."categoryId"
    WHERE 1=1
    """
    params = []
    # ‚úÖ L·ªçc qu·ªëc gia
    sql += " AND c.code = %s"
    params.append(country_code)
    # ‚úÖ L·ªçc theo category name
    if category_name:
        sql += " AND cat.name ILIKE %s"
        params.append(f"%{category_name.strip()}%")
    # L·ªçc theo size
    if size:
        sql += " AND v.size ILIKE %s"
        params.append(f"%{size.strip()}%")
    # L·ªçc theo m√†u s·∫Øc
    if color:
        sql += " AND v.color ILIKE %s"
        params.append(f"%{color.strip()}%")
    # L·ªçc theo c√≤n h√†ng
    if in_stock:
        sql += " AND v.stock > 0"
    # L·ªçc theo kho·∫£ng gi√° theo qu·ªëc gia
    price_min = 0
    price_max = 1e9
    if price_range:
        t = price_range.lower().replace(".", "").replace(",", "")
        t = t.replace("tr", "000000").replace("k", "000")  
        t = re.sub(r"[^\d\-]", " ", t)  
        digits = [int(s) for s in t.split() if s.isdigit()]
        if "d∆∞·ªõi" in t and digits:
            price_max = digits[0]
        elif "tr√™n" in t and digits:
            price_min = digits[0] * 4
        elif "kho·∫£ng" in t and len(digits) == 1:
            price_min = price_max = digits[0]
        elif "t·ª´" in t and "-" in t:
            try:
                parts = t.split("-")
                price_min = int("".join(filter(str.isdigit, parts[0])))
                price_max = int("".join(filter(str.isdigit, parts[1])))
            except:
                pass
        elif "under" in t and digits:
            price_max = digits[0]
        elif "over" in t and digits:
            price_min = digits[0] * 4
        elif "about" in t and digits:
            price_min = price_max = digits[0]
            price_min *= 4
        elif "from" in t and "-" in t:
            try:
                parts = t.split("-")
                price_min = int("".join(filter(str.isdigit, parts[0])))
                price_max = int("".join(filter(str.isdigit, parts[1])))
            except:
                pass
        elif "-" in t:
            try:
                parts = t.split("-")
                price_min = int("".join(filter(str.isdigit, parts[0])))
                price_max = int("".join(filter(str.isdigit, parts[1])))
            except:
                pass
    sql += " AND pp.price BETWEEN %s AND %s"
    params.extend([price_min, price_max])
    sql += " ORDER BY pp.price ASC LIMIT %s"
    params.append(limit)
    cursor.execute(sql, params)
    products = cursor.fetchall()
    pp(products)
    if not products:
        return "üòî Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n."
    response = "üîé **K·∫øt qu·∫£ t√¨m ki·∫øm s·∫£n ph·∫©m:**\n"
    for p in products:
        pid, name, price, size, color, sku, stock, images_url = p
        price_fmt = f"{price:,.0f} {price_unit}"
        response += (
            f"\nüß• **{name}**\n"
            f"- Danh m·ª•c: {category_name}\n"
            f"- üí∞ Gi√°: {price_fmt}\n"
            f"- üé® M√†u: {color} | üìè Size: {size}\n"
            f"- üî¢ SKU: {sku} | üì¶ C√≥ s·∫µn: {stock}\n"
            f"- [Xem chi ti·∫øt](https://aifshop.vercel.app/products/{pid})\n"
            f"- üñºÔ∏è H√¨nh ·∫£nh: ![Image]({images_url})\n"
        )
    response += "\nüëâ B·∫°n mu·ªën xem chi ti·∫øt s·∫£n ph·∫©m n√†o kh√¥ng?"
    return response

# Tr√≠ch xu·∫•t ki·ªÉm tra ƒë∆°n h√†ng
def check_order_status(
    order_id: str = "", phone: str = "", country_code: str = "", lang: str = ""
) -> str:
    """
    Ki·ªÉm tra t√¨nh tr·∫°ng ƒë∆°n h√†ng v√† hi·ªÉn th·ªã chi ti·∫øt t·ª´ng ƒë∆°n h√†ng k√®m th√¥ng tin kh√°ch h√†ng v√† s·∫£n ph·∫©m theo s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m√£ ƒë∆°n h√†ng.
    Args:
        order_id (str): M√£ ƒë∆°n h√†ng c·ªßa ƒë∆°n h√†ng.
        phone (str): S·ªë ƒëi·ªán tho·∫°i c·ªßa kh√°ch h√†ng.
    Returns:
        str: K·∫øt qu·∫£ ki·ªÉm tra ƒë∆°n h√†ng d∆∞·ªõi d·∫°ng markdown.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
    sql = """
        SELECT 
            o.id,
            o."orderCode",
            o.status,
            o."createdAt",
            o.total,
            o."shippingFullName",
            a."firstName",
            a."lastName",
            o."shippingEmail",
            a.phone,
            o."customerNote",
            a.street,
            a.ward,
            a.district,
            a.province,
            a."countryId",
            o."uniqueCode"
        FROM "Order" o
        LEFT JOIN "Address" a ON a.id = o."addressId"
        WHERE 1=1
    """
    params = []
    if order_id:
        sql += ' AND o."uniqueCode" ILIKE %s'
        params.append(f"%{order_id}%")
    if phone:
        sql += " AND a.phone ILIKE %s"
        params.append(f"%{phone}%")
    sql += ' ORDER BY o."createdAt" DESC LIMIT 3'
    try:
        cursor.execute(sql, params)
        orders = cursor.fetchall()
        if not orders:
            return "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o kh·ªõp v·ªõi th√¥ng tin b·∫°n cung c·∫•p."
        response = "T√¥i ƒë√£ t√¨m th·∫•y c√°c ƒë∆°n h√†ng c·ªßa b·∫°n v·ªõi th√¥ng tin ƒë√£ cung c·∫•p:\n"
        for order in orders:
            (
                order_db_id,
                order_code,
                status,
                created_at,
                total,
                shipping_full_name,
                first_name,
                last_name,
                email,
                phone_num,
                note,
                street,
                ward,
                district,
                province,
                country_id,
                unique_code,
            ) = order
            full_name = shipping_full_name.strip() if shipping_full_name else f"{first_name or ''} {last_name or ''}".strip()
            created_at_fmt = created_at.strftime("%d/%m/%Y")
            total_fmt = f"{total:,.0f} {price_unit}"
            note = note if note else "(kh√¥ng c√≥ ghi ch√∫)"
            shipping_address = ", ".join([p for p in [street, ward, district, province] if p])
            # L·∫•y s·∫£n ph·∫©m (d√πng c√°ch l·∫•y h√¨nh nh∆∞ extract_query_product)
            item_sql = """
                SELECT 
                    p.name,
                    v.size,
                    v.color,
                    i.quantity,
                    i.price,
                    COALESCE(p.images[1], '') AS image_url
                FROM "OrderItem" i
                JOIN "Product" p ON p.id = i."productId"
                JOIN "ProductVariant" v ON v.id = i."productVariantId"
                WHERE i."orderId" = %s
            """
            cursor.execute(item_sql, (order_db_id,))
            items = cursor.fetchall()
            response += f"\n**ƒê∆°n h√†ng #{unique_code}**\n"
            # Hi·ªÉn th·ªã s·∫£n ph·∫©m tr∆∞·ªõc, m·ªói thu·ªôc t√≠nh xu·ªëng d√≤ng
            for name, size, color, quantity, price, image_url in items:
                price_fmt = f"{price:,.0f} {price_unit}"
                response += (
                    f"* S·∫£n ph·∫©m: {name}\n"
                    f"  - Size: {size}\n"
                    f"  - M√†u: {color}\n"
                    f"  - S·ªë l∆∞·ª£ng: {quantity}\n"
                    f"  - Gi√°: {price_fmt}\n"
                )
                if image_url:
                    response += f"  - üñºÔ∏è H√¨nh ·∫£nh: ![Image]({image_url})\n"
            # Sau ƒë√≥ m·ªõi t·ªõi th√¥ng tin ƒë∆°n h√†ng
            response += (
                f"- Tr·∫°ng th√°i: {status}\n"
                f"- Ng√†y ƒë·∫∑t: {created_at_fmt}\n"
                f"- T·ªïng ti·ªÅn: {total_fmt}\n"
                f"- Ng∆∞·ªùi nh·∫≠n: {full_name}\n"
                f"- Email: {email}\n"
                f"- S·ªë ƒëi·ªán tho·∫°i: {phone_num}\n"
                f"- ƒê·ªãa ch·ªâ giao h√†ng: {shipping_address}\n"
                f"- Ghi ch√∫: {note}\n"
                f"- M√£ ƒë∆°n h√†ng duy nh·∫•t: {unique_code}\n"
            )
        return response
    except Exception as e:
        logger.error(f"Error checking order: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra ƒë∆°n h√†ng. Vui l√≤ng th·ª≠ l·∫°i sau."

# Truy v·∫•n th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
def extract_information_product(
    product_keyword: str, lang: str = "vi", country_code: str = ""
) -> str:
    """
    Truy v·∫•n th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo t·ª´ kh√≥a ho·∫∑c t√™n s·∫£n ph·∫©m.
    Args:
        product_keyword (str): T·ª´ kh√≥a ho·∫∑c t√™n s·∫£n ph·∫©m c·∫ßn t√¨m.
        lang (str): Ng√¥n ng·ªØ c·ªßa ng∆∞·ªùi d√πng, ·∫£nh h∆∞·ªüng ƒë·∫øn c√°ch hi·ªÉn th·ªã k·∫øt qu·∫£.
        country_code (str): M√£ qu·ªëc gia ƒë·ªÉ l·∫•y gi√° theo qu·ªëc gia.
    Returns:
        str: K·∫øt qu·∫£ th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m d∆∞·ªõi d·∫°ng markdown.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
    sql = """
        SELECT 
            p.id,
            p.name,
            p.description,
            pp.price AS country_price,
            p.stock,
            p.images[1] AS image_url,
            c.name AS category_name,
            v.id AS variant_id,
            v.color,
            v.size,
            v.stock AS variant_stock,
            v.sku,
            v.weight
        FROM "Product" p
        LEFT JOIN "ProductVariant" v ON v."productId" = p.id 
        LEFT JOIN "Category" c ON c.id = p."categoryId"
        LEFT JOIN "ProductPrice" pp ON pp."productId" = p.id
        LEFT JOIN "Country" co ON co.id = pp."countryId"
        WHERE LOWER(p.name) ILIKE %s AND co.code = %s
        ORDER BY v.size, v.color
    """
    cursor.execute(sql, (f"%{product_keyword.lower()}%", country_code))
    rows = cursor.fetchall()
    if not rows:
        return f"Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o kh·ªõp v·ªõi t·ª´ kh√≥a: {product_keyword}"
    first = rows[0]
    name, desc, price, stock, images_url, category = (
        first[1],
        first[2],
        first[3],
        first[4],
        first[5],
        first[6],
    )
    response = f"üõç **{name}**\n"
    response += (
        f"- Danh m·ª•c: {category}\n"
        f"- Gi√°: {price:,.0f} {price_unit}\n"
        f"- C√≥ s·∫µn: {stock}\n"
        f"- M√¥ t·∫£: {desc}\n"
        f"- [Xem chi ti·∫øt](https://aifshop.vercel.app/products/{first[0]})\n"
    )
    response += f"- üñºÔ∏è H√¨nh ·∫£nh: ![Image]({images_url})\n"
    response += "\nüîÑ **C√°c bi·∫øn th·ªÉ:**\n"
    for row in rows:
        response += (
            f"* M√†u: {row[8]} \n"
            f"  Size: {row[9]} ‚Äì \n"
            f"  SKU: {row[11]} ‚Äì \n"
            f"  C√≥ s·∫µn: {row[10]} ‚Äì \n"
            f"  N·∫∑ng: {row[12]}kg\n"
        )
    return response


# L·∫•y th√¥ng tin v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i hi·ªán c√≥
def check_active_coupons(lang: str = "", country_code: str = "") -> str:
    """
    Tr·∫£ v·ªÅ danh s√°ch c√°c m√£ gi·∫£m gi√° c√≤n hi·ªáu l·ª±c d∆∞·ªõi d·∫°ng markdown.
    """
    if not country_code:
        country_code = "US" if lang == "en" else "VN"
    price_unit = "$" if lang == "en" else "VND"
   
    sql = """
        SELECT 
            code,
            type,
            "discountType",
            "discountValue",
            "maxDiscount",
            "minOrderValue",
            "startDate",
            "endDate"
        FROM "Coupon"
        WHERE "isActive" = TRUE
          AND NOW() BETWEEN "startDate" AND "endDate"
        ORDER BY "startDate" DESC
        LIMIT 10
    """
    try:
        cursor.execute(sql)
        coupons = cursor.fetchall()

        if not coupons:
            return "Hi·ªán t·∫°i kh√¥ng c√≥ m√£ gi·∫£m gi√° n√†o ƒëang ho·∫°t ƒë·ªông."

        response = "üéÅ **Danh s√°ch m√£ gi·∫£m gi√° hi·ªán c√≥:**\n"
        for c in coupons:
            (
                code,
                ctype,
                discount_type,
                discount_value,
                max_discount,
                min_order_value,
                start_date,
                end_date,
            ) = c

            # Hi·ªÉn th·ªã m·ª©c gi·∫£m
            if discount_type == "AMOUNT":
                discount_info = f"{discount_value:,.0f} {price_unit}"
            elif discount_type == "PERCENT":
                discount_info = f"{discount_value:.0f}%"
            else:
                discount_info = f"{discount_value}"

            max_discount_str = (
                f" ‚Äì Gi·∫£m t·ªëi ƒëa {max_discount:,.0f} {price_unit}"
                if max_discount
                else ""
            )
            min_order_str = (
                f" ‚Äì ƒê∆°n t·ªëi thi·ªÉu {min_order_value:,.0f} {price_unit}"
                if min_order_value
                else ""
            )

            response += (
                f"- M√£ **{code}**: Gi·∫£m {discount_info}{max_discount_str}{min_order_str}\n"
                f"  ‚è≥ Hi·ªáu l·ª±c: {start_date.strftime('%d/%m/%Y')} ‚Üí {end_date.strftime('%d/%m/%Y')}\n"
            )

        return response

    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y coupon: {e}")
        return "ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra m√£ gi·∫£m gi√°. Vui l√≤ng th·ª≠ l·∫°i sau."
