import pandas as pd
import joblib
from catboost import CatBoostClassifier
import os


# Load model v√† encoder
current_dir = os.path.dirname(os.path.abspath(__file__))  # Th∆∞ m·ª•c ch·ª©a file rcmsizetool.py
model_path = os.path.join(current_dir, "../model/catboost_pipeline_model_final.cbm")
encoder_path = os.path.join(current_dir, "../model/catboost_pipeline_label_encoder_final.pkl")
model = CatBoostClassifier()
model.load_model(model_path)
le = joblib.load(encoder_path)

size_description = {
    'n·ªØ': {
        'S': {"target_audience": "Th√≠ch m·∫∑c √°o r·ªông r√£i, tho·∫£i m√°i h∆°n size XS, ho·∫∑c d√°ng ng∆∞·ªùi v·ª´a ph·∫£i.", "style": "Tr·∫ª trung, tho·∫£i m√°i, d·ªÖ ph·ªëi ƒë·ªì."},
        'M': {"target_audience": "Ph√π h·ª£p v·ªõi ƒëa s·ªë n·ªØ gi·ªõi mu·ªën s·ª± tho·∫£i m√°i.", "style": "R·ªông v·ª´a ph·∫£i, tho·∫£i m√°i t·ªëi ƒëa, che khuy·∫øt ƒëi·ªÉm nh·∫π."},
        'L': {"target_audience": "Th√≠ch m·∫∑c r·ªông r√£i, tho·∫£i m√°i ho·∫∑c c√≥ v√≥c d√°ng ƒë·∫ßy ƒë·∫∑n h∆°n.", "style": "T·∫°o s·ª± tho·∫£i m√°i t·ªëi ƒëa, ph√≥ng kho√°ng, c√≥ th·ªÉ m·∫∑c d√°ng oversized nh·∫π."},
        'XL': {"target_audience": "R·∫•t cao, ho·∫∑c mu·ªën m·∫∑c √°o th·∫≠t r·ªông r√£i, phom ph√≥ng kho√°ng.", "style": "Tho·∫£i m√°i t·ªëi ƒëa, phom d√°ng r·ªông, ph√π h·ª£p phong c√°ch c√° t√≠nh."},
        '2XL': {"target_audience": "V√≥c d√°ng l·ªõn ho·∫∑c r·∫•t cao, mu·ªën m·∫∑c √°o si√™u r·ªông (oversized).", "style": "Tho·∫£i m√°i v∆∞·ª£t tr·ªôi, phong c√°ch ƒë·ªôc ƒë√°o, ·∫•n t∆∞·ª£ng."}
    },
    'nam': {
        'S': {"target_audience": "V√≥c d√°ng v·ª´a ph·∫£i, th√≠ch m·∫∑c √°o √¥m v·ª´a v·∫∑n.", "style": "L·ªãch s·ª±, g·ªçn g√†ng, nƒÉng ƒë·ªông."},
        'M': {"target_audience": "Ph√π h·ª£p v·ªõi ƒëa s·ªë nam gi·ªõi, mu·ªën √°o v·ª´a v·∫∑n, tho·∫£i m√°i.", "style": "V·ª´a v·∫∑n, kh√¥ng qu√° √¥m c≈©ng kh√¥ng qu√° r·ªông, nƒÉng ƒë·ªông."},
        'L': {"target_audience": "V√≥c d√°ng trung b√¨nh kh√° ƒë·∫øn ƒë·∫ßy ƒë·∫∑n, mu·ªën √°o r·ªông r√£i.", "style": "Tho·∫£i m√°i, ph√≥ng kho√°ng, d·ªÖ v·∫≠n ƒë·ªông."},
        'XL': {"target_audience": "V√≥c d√°ng cao to.", "style": "R·ªông r√£i, tho·∫£i m√°i t·ªëi ƒëa, ph√π h·ª£p phong c√°ch Streetwear."},
        '2XL': {"target_audience": "V√≥c d√°ng l·ªõn, cao tr√™n 1m80 v√†/ho·∫∑c c√¢n n·∫∑ng tr√™n 100kg.", "style": "Tho·∫£i m√°i v∆∞·ª£t tr·ªôi, phong c√°ch th·ªÉ thao ho·∫∑c c√° t√≠nh m·∫°nh m·∫Ω."}
    }
}

# H√†m d·ª± ƒëo√°n size v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh cho c√°c tr∆∞·ªùng ph·ª•
def predict_size(height, weight, gender, age=None, length_back=None, chest=None, ngang_vai=None, vong_eo=None):
    bmi = weight / ((height / 100) ** 2)

    # G√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
    if age is None:
        age = 25
    if length_back is None:
        length_back = 72.0
    if chest is None:
        chest = 100.0
    if ngang_vai is None:
        ngang_vai = 40.0  # Set default value for ngang_vai (should be adjusted based on domain knowledge)
    if vong_eo is None:
        vong_eo = 80.0  # Set default value for vong_eo (should be adjusted based on domain knowledge)

    input_df = pd.DataFrame([[height, weight, age, gender.lower(), bmi, length_back, chest, ngang_vai, vong_eo]],
                             columns=['height', 'weight', 'age', 'gender', 'BMI', 'length_back', 'chest', 'ngang_vai', 'vong_eo'])

    # Make the prediction
    pred_encoded = model.predict(input_df)[0]
    predicted_size = le.inverse_transform([int(pred_encoded)])[0]
    # Get the style and target audience based on the predicted size and gender
    size_info = size_description[gender][predicted_size]
    return predicted_size, size_info['target_audience'], size_info['style']
# Ch·∫°y local b·∫±ng giao di·ªán d√≤ng l·ªánh
if __name__ == "__main__":
    try:
        height = float(input("Nh·∫≠p chi·ªÅu cao (cm): "))
        weight = float(input("Nh·∫≠p c√¢n n·∫∑ng (kg): "))
        gender = input("Nh·∫≠p gi·ªõi t√≠nh (Nam/N·ªØ): ").strip().lower()

        if gender not in ['nam', 'n·ªØ', 'male', 'female']:
            print("‚ö†Ô∏è Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: Nam/N·ªØ ho·∫∑c male/female.")
        else:
            # C√°c input t√πy ch·ªçn
            age_input = input("Nh·∫≠p tu·ªïi (t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            length_back_input = input("Nh·∫≠p chi·ªÅu d√†i l∆∞ng (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            chest_input = input("Nh·∫≠p v√≤ng ng·ª±c (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            ngang_vai_input = input("Nh·∫≠p ngang vai (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            vong_eo_input = input("Nh·∫≠p v√≤ng eo (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()

            # Chuy·ªÉn ƒë·ªïi n·∫øu c√≥
            age = int(age_input) if age_input else None
            length_back = float(length_back_input) if length_back_input else None
            chest = float(chest_input) if chest_input else None
            ngang_vai = float(ngang_vai_input) if ngang_vai_input else None
            vong_eo = float(vong_eo_input) if vong_eo_input else None

            # D·ª± ƒëo√°n
            size, target_audience, style = predict_size(height, weight, gender, age, length_back, chest, ngang_vai, vong_eo)
            print(f"\nüéØ Recommended size: {size}")
            print(f"üë• Target audience: {target_audience}")
            print(f"üëó Style: {style}")
    except Exception as e:
        print("‚ùå L·ªói khi nh·∫≠p ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu:", e)
