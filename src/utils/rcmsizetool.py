import pandas as pd
import joblib
import numpy as np
import os


# X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn th∆∞ m·ª•c ch·ª©a model
current_dir = os.path.dirname(os.path.abspath(__file__))
model_path = os.path.join(current_dir, "..", "model", "rf_full_pipeline.pkl")
encoder_path = os.path.join(current_dir, "..", "model", "rf_full_label_encoder.pkl")

# Load m√¥ h√¨nh v√† label encoder
pipeline = joblib.load(os.path.abspath(model_path))
label_encoder = joblib.load(os.path.abspath(encoder_path))

size_description = {
    'n·ªØ': {
        'XS': {"target_audience": "V√≥c d√°ng nh·ªè nh·∫Øn, m·∫£nh mai, mu·ªën √°o √¥m g·ªçn.", "style": "√îm v·ª´a ph·∫£i, t√¥n d√°ng g·ªçn g√†ng, nƒÉng ƒë·ªông."},
        'S': {"target_audience": "Th√≠ch m·∫∑c √°o r·ªông r√£i, tho·∫£i m√°i h∆°n size XS, ho·∫∑c d√°ng ng∆∞·ªùi v·ª´a ph·∫£i.", "style": "Tr·∫ª trung, tho·∫£i m√°i, d·ªÖ ph·ªëi ƒë·ªì."},
        'M': {"target_audience": "Ph√π h·ª£p v·ªõi ƒëa s·ªë n·ªØ gi·ªõi mu·ªën s·ª± tho·∫£i m√°i.", "style": "R·ªông v·ª´a ph·∫£i, tho·∫£i m√°i t·ªëi ƒëa, che khuy·∫øt ƒëi·ªÉm nh·∫π."},
        'L': {"target_audience": "Th√≠ch m·∫∑c r·ªông r√£i, tho·∫£i m√°i ho·∫∑c c√≥ v√≥c d√°ng ƒë·∫ßy ƒë·∫∑n h∆°n.", "style": "T·∫°o s·ª± tho·∫£i m√°i t·ªëi ƒëa, ph√≥ng kho√°ng, c√≥ th·ªÉ m·∫∑c d√°ng oversized nh·∫π."},
        'XL': {"target_audience": "R·∫•t cao, ho·∫∑c mu·ªën m·∫∑c √°o th·∫≠t r·ªông r√£i, phom ph√≥ng kho√°ng.", "style": "Tho·∫£i m√°i t·ªëi ƒëa, phom d√°ng r·ªông, ph√π h·ª£p phong c√°ch c√° t√≠nh."},
        '2XL': {"target_audience": "V√≥c d√°ng l·ªõn ho·∫∑c r·∫•t cao, mu·ªën m·∫∑c √°o si√™u r·ªông (oversized).", "style": "Tho·∫£i m√°i v∆∞·ª£t tr·ªôi, phong c√°ch ƒë·ªôc ƒë√°o, ·∫•n t∆∞·ª£ng."}
    },
    'nam': {
        'XS': {"target_audience": "R·∫•t g·∫ßy, th√≠ch m·∫∑c √°o √¥m s√°t ng∆∞·ªùi.", "style": "√îm s√°t, t√¥n l√™n v√≥c d√°ng g·ªçn g√†ng."},
        'S': {"target_audience": "V√≥c d√°ng v·ª´a ph·∫£i, th√≠ch m·∫∑c √°o √¥m v·ª´a v·∫∑n.", "style": "L·ªãch s·ª±, g·ªçn g√†ng, nƒÉng ƒë·ªông."},
        'M': {"target_audience": "Ph√π h·ª£p v·ªõi ƒëa s·ªë nam gi·ªõi, mu·ªën √°o v·ª´a v·∫∑n, tho·∫£i m√°i.", "style": "V·ª´a v·∫∑n, kh√¥ng qu√° √¥m c≈©ng kh√¥ng qu√° r·ªông, nƒÉng ƒë·ªông."},
        'L': {"target_audience": "V√≥c d√°ng trung b√¨nh kh√° ƒë·∫øn ƒë·∫ßy ƒë·∫∑n, mu·ªën √°o r·ªông r√£i.", "style": "Tho·∫£i m√°i, ph√≥ng kho√°ng, d·ªÖ v·∫≠n ƒë·ªông."},
        'XL': {"target_audience": "V√≥c d√°ng cao to.", "style": "R·ªông r√£i, tho·∫£i m√°i t·ªëi ƒëa, ph√π h·ª£p phong c√°ch Streetwear."},
        '2XL': {"target_audience": "V√≥c d√°ng l·ªõn, cao tr√™n 1m80 v√†/ho·∫∑c c√¢n n·∫∑ng tr√™n 100kg.", "style": "Tho·∫£i m√°i v∆∞·ª£t tr·ªôi, phong c√°ch th·ªÉ thao ho·∫∑c c√° t√≠nh m·∫°nh m·∫Ω."}
    }
}

# Gi√° tr·ªã trung b√¨nh c·ªßa c√°c feature c√≤n l·∫°i theo gi·ªõi t√≠nh
mean_values = {
    'nam': {
        'chest': 100,
        'waist': 100,
        'shoulder': 50
    },
    'n·ªØ': {
        'chest': 110,
        'waist': 90,
        'shoulder': 50
    }
}
def predict_size(height, weight, gender, chest=None, waist=None, shoulder=None):
    gender = gender.strip().lower()  
    if gender not in mean_values:
        raise ValueError("Gi·ªõi t√≠nh ph·∫£i l√† 'nam' ho·∫∑c 'n·ªØ'.")
    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng trung b√¨nh theo gi·ªõi t√≠nh
    chest = chest if chest is not None else mean_values[gender]['chest']
    waist = waist if waist is not None else mean_values[gender]['waist']
    shoulder = shoulder if shoulder is not None else mean_values[gender]['shoulder']    
    # T√≠nh BMI
    BMI = weight / ((height / 100) ** 2)
    # T·∫°o dataframe cho input
    input_df = pd.DataFrame([{
        'height': height,
        'weight': weight,
        'chest': chest,
        'waist': waist,
        'shoulder': shoulder,
        'gender': gender,
        'BMI': BMI
    }])

    # D·ª± ƒëo√°n
    pred_encoded = pipeline.predict(input_df)[0]
    pred_label = label_encoder.inverse_transform([pred_encoded])[0]
    size_info = size_description[gender][pred_label]
    return pred_label, size_info['target_audience'], size_info['style']

# Ch·∫°y local b·∫±ng giao di·ªán d√≤ng l·ªánh
if __name__ == "__main__":
    try:
        height = float(input("Nh·∫≠p chi·ªÅu cao (cm): "))
        weight = float(input("Nh·∫≠p c√¢n n·∫∑ng (kg): "))
        gender = input("Nh·∫≠p gi·ªõi t√≠nh (Nam/N·ªØ): ").strip().lower()

        if gender not in ['nam', 'n·ªØ', 'male', 'female']:
            print("‚ö†Ô∏è Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: Nam/N·ªØ ho·∫∑c male/female.")
        else:
            # C√°c input t√πy ch·ªçn
            chest_input = input("Nh·∫≠p v√≤ng ng·ª±c (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            waist_input = input("Nh·∫≠p v√≤ng eo (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            shoulder_input = input("Nh·∫≠p ngang vai (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            # Chuy·ªÉn ƒë·ªïi n·∫øu c√≥
            chest = float(chest_input) if chest_input else None
            shoulder = float(shoulder_input) if shoulder_input else None
            waist = float(waist_input) if waist_input else None

            # D·ª± ƒëo√°n
            result, target_audience, style = predict_size(height, weight, gender, chest, waist, shoulder)
            print(f"\nüéØ Recommended size: {result.upper()}")
            print(f"üë• Target audience: {target_audience}")
            print(f"üëó Style: {style}")
    except Exception as e:
        print("‚ùå L·ªói khi nh·∫≠p ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu:", e)
